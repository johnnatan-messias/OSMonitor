// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_COMMANDINFO_COM_EOLWRAL_OSMONITOR_CORE_H_
#define FLATBUFFERS_GENERATED_COMMANDINFO_COM_EOLWRAL_OSMONITOR_CORE_H_

#include "flatbuffers/flatbuffers.h"


namespace com {
namespace eolwral {
namespace osmonitor {
namespace core {

struct commandInfo;

struct commandInfo : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *arguments() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* arguments */) &&
           verifier.Verify(arguments()) &&
           verifier.VerifyVectorOfStrings(arguments()) &&
           verifier.EndTable();
  }
};

struct commandInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_arguments(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> arguments) { fbb_.AddOffset(4, arguments); }
  commandInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  commandInfoBuilder &operator=(const commandInfoBuilder &);
  flatbuffers::Offset<commandInfo> Finish() {
    auto o = flatbuffers::Offset<commandInfo>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<commandInfo> CreatecommandInfo(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> arguments = 0) {
  commandInfoBuilder builder_(_fbb);
  builder_.add_arguments(arguments);
  return builder_.Finish();
}

inline const commandInfo *GetcommandInfo(const void *buf) { return flatbuffers::GetRoot<commandInfo>(buf); }

inline bool VerifycommandInfoBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<commandInfo>(); }

inline void FinishcommandInfoBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<commandInfo> root) { fbb.Finish(root); }

}  // namespace core
}  // namespace osmonitor
}  // namespace eolwral
}  // namespace com

#endif  // FLATBUFFERS_GENERATED_COMMANDINFO_COM_EOLWRAL_OSMONITOR_CORE_H_
