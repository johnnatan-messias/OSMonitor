// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_OSINFO_COM_EOLWRAL_OSMONITOR_CORE_H_
#define FLATBUFFERS_GENERATED_OSINFO_COM_EOLWRAL_OSMONITOR_CORE_H_

#include "flatbuffers/flatbuffers.h"


namespace com {
namespace eolwral {
namespace osmonitor {
namespace core {

struct osInfo;

struct osInfo : private flatbuffers::Table {
  /// system uptime 
  uint64_t upTime() const { return GetField<uint64_t>(4, 0); }
  /// total memory
  uint64_t totalMemory() const { return GetField<uint64_t>(6, 0); }
  /// free memory
  uint64_t freeMemory() const { return GetField<uint64_t>(8, 0); }
  /// shared memory
  uint64_t sharedMemory() const { return GetField<uint64_t>(10, 0); }
  /// buffered memory
  uint64_t bufferedMemory() const { return GetField<uint64_t>(12, 0); }
  /// cached memory
  uint64_t cachedMemory() const { return GetField<uint64_t>(14, 0); }
  /// total swap size
  uint64_t totalSwap() const { return GetField<uint64_t>(16, 0); }
  /// free swap size
  uint64_t freeSwap() const { return GetField<uint64_t>(18, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, 4 /* upTime */) &&
           VerifyField<uint64_t>(verifier, 6 /* totalMemory */) &&
           VerifyField<uint64_t>(verifier, 8 /* freeMemory */) &&
           VerifyField<uint64_t>(verifier, 10 /* sharedMemory */) &&
           VerifyField<uint64_t>(verifier, 12 /* bufferedMemory */) &&
           VerifyField<uint64_t>(verifier, 14 /* cachedMemory */) &&
           VerifyField<uint64_t>(verifier, 16 /* totalSwap */) &&
           VerifyField<uint64_t>(verifier, 18 /* freeSwap */) &&
           verifier.EndTable();
  }
};

struct osInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_upTime(uint64_t upTime) { fbb_.AddElement<uint64_t>(4, upTime, 0); }
  void add_totalMemory(uint64_t totalMemory) { fbb_.AddElement<uint64_t>(6, totalMemory, 0); }
  void add_freeMemory(uint64_t freeMemory) { fbb_.AddElement<uint64_t>(8, freeMemory, 0); }
  void add_sharedMemory(uint64_t sharedMemory) { fbb_.AddElement<uint64_t>(10, sharedMemory, 0); }
  void add_bufferedMemory(uint64_t bufferedMemory) { fbb_.AddElement<uint64_t>(12, bufferedMemory, 0); }
  void add_cachedMemory(uint64_t cachedMemory) { fbb_.AddElement<uint64_t>(14, cachedMemory, 0); }
  void add_totalSwap(uint64_t totalSwap) { fbb_.AddElement<uint64_t>(16, totalSwap, 0); }
  void add_freeSwap(uint64_t freeSwap) { fbb_.AddElement<uint64_t>(18, freeSwap, 0); }
  osInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  osInfoBuilder &operator=(const osInfoBuilder &);
  flatbuffers::Offset<osInfo> Finish() {
    auto o = flatbuffers::Offset<osInfo>(fbb_.EndTable(start_, 8));
    return o;
  }
};

inline flatbuffers::Offset<osInfo> CreateosInfo(flatbuffers::FlatBufferBuilder &_fbb,
   uint64_t upTime = 0,
   uint64_t totalMemory = 0,
   uint64_t freeMemory = 0,
   uint64_t sharedMemory = 0,
   uint64_t bufferedMemory = 0,
   uint64_t cachedMemory = 0,
   uint64_t totalSwap = 0,
   uint64_t freeSwap = 0) {
  osInfoBuilder builder_(_fbb);
  builder_.add_freeSwap(freeSwap);
  builder_.add_totalSwap(totalSwap);
  builder_.add_cachedMemory(cachedMemory);
  builder_.add_bufferedMemory(bufferedMemory);
  builder_.add_sharedMemory(sharedMemory);
  builder_.add_freeMemory(freeMemory);
  builder_.add_totalMemory(totalMemory);
  builder_.add_upTime(upTime);
  return builder_.Finish();
}

inline const osInfo *GetosInfo(const void *buf) { return flatbuffers::GetRoot<osInfo>(buf); }

inline bool VerifyosInfoBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<osInfo>(); }

inline void FinishosInfoBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<osInfo> root) { fbb.Finish(root); }

}  // namespace core
}  // namespace osmonitor
}  // namespace eolwral
}  // namespace com

#endif  // FLATBUFFERS_GENERATED_OSINFO_COM_EOLWRAL_OSMONITOR_CORE_H_
