// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_LOGCATINFO_COM_EOLWRAL_OSMONITOR_CORE_H_
#define FLATBUFFERS_GENERATED_LOGCATINFO_COM_EOLWRAL_OSMONITOR_CORE_H_

#include "flatbuffers/flatbuffers.h"


namespace com {
namespace eolwral {
namespace osmonitor {
namespace core {

struct logcatInfo;
struct logcatInfoList;

enum logPriority {
  logPriority_UNKNOWN = 0,
  logPriority_DEFAULT = 1,
  logPriority_VERBOSE = 2,
  logPriority_DEBUG = 3,
  logPriority_INFO = 4,
  logPriority_WARN = 5,
  logPriority_ERROR = 6,
  logPriority_FATAL = 7,
  logPriority_SILENT = 8
};

inline const char **EnumNameslogPriority() {
  static const char *names[] = { "UNKNOWN", "DEFAULT", "VERBOSE", "DEBUG", "INFO", "WARN", "ERROR", "FATAL", "SILENT", nullptr };
  return names;
}

inline const char *EnumNamelogPriority(logPriority e) { return EnumNameslogPriority()[e]; }

struct logcatInfo : private flatbuffers::Table {
  /// priority
  logPriority priority() const { return static_cast<logPriority>(GetField<int8_t>(4, 0)); }
  /// seconds since Epoch 
  uint64_t seconds() const { return GetField<uint64_t>(6, 0); }
  /// nanoseconds 
  uint64_t nanoSeconds() const { return GetField<uint64_t>(8, 0); }
  /// generating process's pid 
  uint32_t pid() const { return GetField<uint32_t>(10, 0); }
  /// generating process's tid 
  uint32_t tid() const { return GetField<uint32_t>(12, 0); }
  /// Tag 
  const flatbuffers::String *tag() const { return GetPointer<const flatbuffers::String *>(14); }
  /// message
  const flatbuffers::String *message() const { return GetPointer<const flatbuffers::String *>(16); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, 4 /* priority */) &&
           VerifyField<uint64_t>(verifier, 6 /* seconds */) &&
           VerifyField<uint64_t>(verifier, 8 /* nanoSeconds */) &&
           VerifyField<uint32_t>(verifier, 10 /* pid */) &&
           VerifyField<uint32_t>(verifier, 12 /* tid */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 14 /* tag */) &&
           verifier.Verify(tag()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 16 /* message */) &&
           verifier.Verify(message()) &&
           verifier.EndTable();
  }
};

struct logcatInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_priority(logPriority priority) { fbb_.AddElement<int8_t>(4, static_cast<int8_t>(priority), 0); }
  void add_seconds(uint64_t seconds) { fbb_.AddElement<uint64_t>(6, seconds, 0); }
  void add_nanoSeconds(uint64_t nanoSeconds) { fbb_.AddElement<uint64_t>(8, nanoSeconds, 0); }
  void add_pid(uint32_t pid) { fbb_.AddElement<uint32_t>(10, pid, 0); }
  void add_tid(uint32_t tid) { fbb_.AddElement<uint32_t>(12, tid, 0); }
  void add_tag(flatbuffers::Offset<flatbuffers::String> tag) { fbb_.AddOffset(14, tag); }
  void add_message(flatbuffers::Offset<flatbuffers::String> message) { fbb_.AddOffset(16, message); }
  logcatInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  logcatInfoBuilder &operator=(const logcatInfoBuilder &);
  flatbuffers::Offset<logcatInfo> Finish() {
    auto o = flatbuffers::Offset<logcatInfo>(fbb_.EndTable(start_, 7));
    return o;
  }
};

inline flatbuffers::Offset<logcatInfo> CreatelogcatInfo(flatbuffers::FlatBufferBuilder &_fbb,
   logPriority priority = logPriority_UNKNOWN,
   uint64_t seconds = 0,
   uint64_t nanoSeconds = 0,
   uint32_t pid = 0,
   uint32_t tid = 0,
   flatbuffers::Offset<flatbuffers::String> tag = 0,
   flatbuffers::Offset<flatbuffers::String> message = 0) {
  logcatInfoBuilder builder_(_fbb);
  builder_.add_nanoSeconds(nanoSeconds);
  builder_.add_seconds(seconds);
  builder_.add_message(message);
  builder_.add_tag(tag);
  builder_.add_tid(tid);
  builder_.add_pid(pid);
  builder_.add_priority(priority);
  return builder_.Finish();
}

struct logcatInfoList : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<logcatInfo>> *list() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<logcatInfo>> *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* list */) &&
           verifier.Verify(list()) &&
           verifier.VerifyVectorOfTables(list()) &&
           verifier.EndTable();
  }
};

struct logcatInfoListBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<logcatInfo>>> list) { fbb_.AddOffset(4, list); }
  logcatInfoListBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  logcatInfoListBuilder &operator=(const logcatInfoListBuilder &);
  flatbuffers::Offset<logcatInfoList> Finish() {
    auto o = flatbuffers::Offset<logcatInfoList>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<logcatInfoList> CreatelogcatInfoList(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<logcatInfo>>> list = 0) {
  logcatInfoListBuilder builder_(_fbb);
  builder_.add_list(list);
  return builder_.Finish();
}

inline const logcatInfoList *GetlogcatInfoList(const void *buf) { return flatbuffers::GetRoot<logcatInfoList>(buf); }

inline bool VerifylogcatInfoListBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<logcatInfoList>(); }

inline void FinishlogcatInfoListBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<logcatInfoList> root) { fbb.Finish(root); }

}  // namespace core
}  // namespace osmonitor
}  // namespace eolwral
}  // namespace com

#endif  // FLATBUFFERS_GENERATED_LOGCATINFO_COM_EOLWRAL_OSMONITOR_CORE_H_
